---
version: '3'

volumes:
  data-postgres: {}
  data-opennms: {}
  data-opennms-cfg: {}
  data-es01: {}
  data-grafana: {}

services:
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: es01
    hostname: es01
    environment:
     TZ: Europe/Berlin
     discovery.type: single-node
     node.name: es-node-01
     search.max_buckets: 250000
    ports:
      - "9200:9200/tcp"
      - "9300:9300/tcp"
    volumes:
      - data-es01:/usr/share/elasticsearch/data
      - ./container-fs/es01/plugins:/usr/share/elasticsearch/plugins
    healthcheck:
      test: curl http://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  database:
    image: timescale/timescaledb:latest-pg15
    environment:
      TZ: Europe/Berlin
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - data-postgres:/var/lib/postgresql/data
    command: ["postgres", "-N", "200"]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 30s
      retries: 3

  broker:
    image: confluentinc/cp-kafka:latest
    environment:
      TZ: Europe/Berlin
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'broker:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:9092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    ports:
      - "9092:9092/tcp"
      - "9101:9101/tcp"

  core:
    image: opennms/horizon:33.0.1
    depends_on:
      database:
        condition: service_healthy
      es01:
        condition: service_healthy
    environment:
      TZ: Europe/Berlin
      POSTGRES_HOST: database
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      OPENNMS_DBNAME: opennms
      OPENNMS_DBUSER: opennms
      OPENNMS_DBPASS: opennms
      OPENNMS_TIMESERIES_STRATEGY: rrd
      OPENNMS_RRD_STOREBYFOREIGNSOURCE: true
      OPENNMS_RRD_STORAGECLASS: org.opennms.netmgt.rrd.rrdtool.MultithreadedJniRrdStrategy
      OPENNMS_LIBRARY_JRRD2: /usr/lib64/libjrrd2.so
    volumes:
      - data-opennms:/opennms-data
      - data-opennms-cfg:/opt/opennms/etc
      - ./container-fs/core/etc-overlay:/opt/opennms-etc-overlay
    ports:
      - "8980:8980/tcp"
      - "8101:8101/tcp"
      - "9999:9999/udp"
      - "162:1162/udp"
      - "514:1514/udp"
    command: ["-s"]
    healthcheck:
      test: [ "CMD", "curl", "-f", "-I", "http://localhost:8980/opennms/login.jsp" ]
      interval: 1m
      timeout: 5s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      broker:
        condition: service_started
    environment:
      TZ: Europe/Berlin
      KAFKA_CLUSTERS_0_NAME: onms-kafka-labs
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
    ports:
      - "8080:8080/tcp"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    depends_on:
      es01:
        condition: service_healthy
    environment:
      TZ: Europe/Berlin
      ELASTICSEARCH_HOSTS: http://es01:9200
    ports:
      - "5601:5601/tcp"
    healthcheck:
      test: curl http://localhost:5601 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 50
